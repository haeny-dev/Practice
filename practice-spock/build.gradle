buildscript {
    ext {
        groovVersion = '2.2-M1-groovy-3.0'
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'jacoco'
}

group = 'com.haeny'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'com.h2database:h2:2.1.214'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.spockframework:spock-spring:${groovVersion}"
    testImplementation "org.spockframework:spock-core:${groovVersion}"
}

tasks.named('test') {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }

    useJUnitPlatform()
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.5'

    // 테스트결과 리포트를 저장할 경로 변경
    // default는 "$/jacoco"
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

/**
 * 바이너리 커버리지 경과를 사람이 읽이 좋은 형태의 리포트로 저장합니다.
 * html 파일로 생성해 사람이 쉽게 눈으로 확인할 수도 있고,
 * SonarQube 등으로 연동하기 위해 xml, csv 같은 형태로도 리포트를 생성할 수 있습니다.
 */
jacocoTestReport {
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.enabled true
        xml.enabled false
        csv.enabled false
    }

    // 각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있다.
    // html.destination file("$buildDir/jacocoHtml")
    // xml.destination file("$buildDir/jacoco.xml")
}

/**
 * 내가 원하는 커버리지 기준을 만족하는지 확인해 주는 task 입니다.
 * 예를 들어, 브랜치 커버리지를 최소한 80% 이상으로 유지하고 싶다면, 이 task에 설정하면 됩니다.
 * `test` task 처럼 Gradle 빌드의 성공/실패로 결과를 보여줍니다.
 */
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'   // 'element' 가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.

            limit {
                counter = 'BRANCH'  // 'counter' 를 지정하지 않으면 default는 'INSTRUCTION'
                value = 'COVEREDRATIO'  // 'value' 를 지정하지 않으면 dafault는 'COVERERATIO'
                minimum = 0.90
            }
        }
    }
}

task testCoverage(type: Test){
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
                ':jacocoTestReport',
                ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
